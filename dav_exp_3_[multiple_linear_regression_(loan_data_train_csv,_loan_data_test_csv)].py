# -*- coding: utf-8 -*-
"""DAV Exp 3 [Multiple Linear Regression (loan_data_train.csv, loan_data_test.csv)].ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1burfeoo7tnaF9-wWngNUt9rnw_IsPtft
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error

train_file = r'loan_data_train.csv'
test_file = r'loan_data_test.csv'
ld_train = pd.read_csv(train_file)
ld_test = pd.read_csv(test_file)

ld_train.head()

ld_test.head()

ld_test['Interest.Rate'] = np.nan
ld_train['data'] = 'train'
ld_test['data'] = 'test'
ld_test = ld_test[ld_train.columns]
ld_all = pd.concat([ld_train, ld_test], axis=0)

ld_train.head()

ld_test.head()

ld_all

ld_all.shape

ld_train.shape

ld_test.shape

ld_all.dtypes

for col in ['Interest.Rate', 'Debt.To.Income.Ratio']:
    ld_all[col] = ld_all[col].str.replace("%", "")

for col in ['Amount.Requested', 'Interest.Rate', 'Debt.To.Income.Ratio', 'Open.CREDIT.Lines', 'Revolving.CREDIT.Balance']:
    ld_all[col] = pd.to_numeric(ld_all[col], errors='coerce')

ld_all.dtypes

ld_all.isnull().sum()

for col in ld_all.columns:
    if(col not in['Interest.Rate', 'data']) & (ld_all[col].isnull().sum()>0):
        ld_all.loc[ld_all[col].isnull(), col] = ld_all.loc[ld_all['data']=='train', col].mean()

ld_all.isnull().sum()

ld_train = ld_all[ld_all['data']=='train'].copy()
ld_train.drop(['data'], axis=1, inplace=True)

ld_test = ld_all[ld_all['data']=='test'].copy()
ld_test.drop(['Interest.Rate', 'data'], axis=1, inplace=True)

ld_train1, ld_validation = train_test_split(ld_train, test_size=0.2, random_state=2)

x_train1 = ld_train1.drop(['Interest.Rate'], axis=1)
y_train1 = ld_train1['Interest.Rate']

lm = LinearRegression()

lm.fit(x_train1, y_train1)

lm.intercept_

lm.coef_

x_train2 = ld_validation.drop('Interest.Rate', axis=1)

predicted_ir = lm.predict(x_train2)

predicted_ir

mean_absolute_error(ld_validation['Interest.Rate'], predicted_ir)

x_train = ld_train.drop('Interest.Rate', axis=1)
y_train = ld_train['Interest.Rate']

lm.fit(x_train, y_train)

lm.intercept_

lm.coef_

test_pred=lm.predict(ld_test)
test_pred